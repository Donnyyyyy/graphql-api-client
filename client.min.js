var extractFiles=(d,e=[])=>{for(var f in d){var i=d[f];'object'==typeof i&&('File'===i.constructor.name?(d[f]=e.length,e.push(i)):e.push(...extractFiles(i)))}return e},makeBody=(d,e,f)=>{if(0<f.length){var i=new FormData;i.append('operations',`{ "query" : ${JSON.stringify(d)}, "variables": ${JSON.stringify(e)} }`),i.append('map','{ "0": ["variables.file"] }'),console.log(i.get('operations'));for(let n=0;n<f.length;n++)i.append(n,f[n]);return i}return JSON.stringify({query:d,variables:e})},__assign=this&&this.__assign||Object.assign||function(d){for(var e,f=1,i=arguments.length;f<i;f++)for(var n in e=arguments[f],e)Object.prototype.hasOwnProperty.call(e,n)&&(d[n]=e[n]);return d};export default function(d,e){(void 0===e?{}:e).headers;return function(i,n){if('function'!=typeof fetch)throw new Error('fetch is not defined. Perhaps you need a polyfill.');let o=extractFiles(n);var q=Object.assign({method:'POST',headers:{Accept:'application/json, text/plain, */*','Content-Type':'application/json;charset=utf-8'},body:makeBody(i,n,o)},e);return 0<o.length&&delete q.headers['Content-Type'],fetch(d,q).then(function(r){return r.json()}).then(function(r){var t=r.data,u=r.errors;return u&&u.length?Promise.reject(u[0].message):t})}}